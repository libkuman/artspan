<?php
// $Id: hansel.module,v 1.21 2011/02/08 23:36:06 mauritsl Exp $

/**
 * @file
 * Hansel module
 *
 * This module provides a way to customize the breadcrumbs for your site.
 * Hansel provides an admin interface where you can specify your own rules
 * for creating breadcrumbs.
 */

define('HANSEL_SWITCH_DEFAULT', '<default>');
define('HANSEL_SWITCH_EMPTY', '<empty>');
define('HANSEL_CONFIG_CID', 'hansel_config');

// Define constants for used variable names.
define('HANSEL_VAR_LAST_ITEM_LINK', 'hansel_breadcrumb_last_item_link');
define('HANSEL_VAR_LAST_ITEM_HIDE', 'hansel_breadcrumb_last_item_hide');
define('HANSEL_VAR_MAX_ITEM_LENGTH', 'hansel_max_item_length');
define('HANSEL_VAR_TRIM_ON_WORD_BOUNDARY', 'hansel_trim_on_word_boundary');
define('HANSEL_VAR_TRIM_ELLPIPSIS', 'hansel_trim_ellipsis');
define('HANSEL_VAR_TRIM_ELLPIPSIS_DEFAULT', '...');
define('HANSEL_VAR_MAX_ITEM_COUNT', 'hansel_max_item_count');
define('HANSEL_VAR_REMOVED_ITEMS_REPLACEMENT', 'hansel_removed_items_replacement');
define('HANSEL_VAR_REMOVED_ITEMS_REPLACEMENT_DEFAULT', '(...)');
define('HANSEL_VAR_CACHE', 'hansel_cache');
define('HANSEL_VAR_CACHE_DEFAULT', 0);
define('HANSEL_VAR_SET_MENU_NAME', 'hansel_set_menu_name');
define('HANSEL_VAR_SET_MENU_NAME_DEFAULT', TRUE);

// Define constants for paths used by Hansel.
define('HANSEL_PATH', 'admin/build/hansel');
define('HANSEL_PATH_CONFIGURATION', 'admin/build/hansel/configuration');
define('HANSEL_PATH_TEST', 'admin/build/hansel/test');
define('HANSEL_PATH_SETTINGS', 'admin/build/hansel/settings');
define('HANSEL_PATH_CONFIG_RULE', 'admin/build/hansel/rule/%');
define('HANSEL_PATH_CONFIG_RULE_ARG', 4);
define('HANSEL_PATH_DELETE_RULE', 'admin/build/hansel/rule/%/delete');
define('HANSEL_PATH_DELETE_RULE_ARG', 4);
define('HANSEL_PATH_CONFIG_SWITCH', 'admin/build/hansel/switch/%');
define('HANSEL_PATH_CONFIG_SWITCH_ARG', 4);
define('HANSEL_PATH_JS_RULE_FORM', 'hansel_js/rule_form');
define('HANSEL_PATH_JS_TEST_FORM', 'hansel_js/test_form');

// Constants for use in configuration options
define('HANSEL_OPTION_STARTS_WITH', 0);
define('HANSEL_OPTION_ENDS_WITH', 1);
define('HANSEL_OPTION_CONTAINS', 2);
define('HANSEL_OPTION_REGEX', 3);
define('HANSEL_OPTION_STARTS_WITH_TEXT', 'starts with');
define('HANSEL_OPTION_ENDS_WITH_TEXT', 'ends with');
define('HANSEL_OPTION_CONTAINS_TEXT', 'contains');
define('HANSEL_OPTION_REGEX_TEXT', 'matches regular expression');

/**
 * Used as a version number for the config structure.
 * 
 * Enables us to identify the version of cache / imports.
 *
 * @see _hansel_build_config()
 */
define('HANSEL_CONFIG_VERSION', 1);

/**
 * Implements hook_perm().
 */
function hansel_perm() {
  return array(
    'administer hansel',
    'use PHP for hansel configuration',
    'test hansel',
  );
}

/**
 * Implements hook_menu().
 */
function hansel_menu() {
  $menu = array();
  
  $menu[HANSEL_PATH] = array(
    'title' => 'Hansel',
    'page callback' => 'hansel_page',
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $menu[HANSEL_PATH_CONFIGURATION] = array(
    'title' => 'Configuration',
    'page callback' => 'hansel_page',
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $menu[HANSEL_PATH_TEST] = array(
    'title' => 'Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hansel_test_form'),
    'access arguments' => array('test hansel'),
    'file' => 'hansel.test.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  $menu[HANSEL_PATH_SETTINGS] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hansel_settings'),
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $menu[HANSEL_PATH_CONFIG_RULE] = array(
    'title' => 'Edit rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hansel_rule_form', HANSEL_PATH_CONFIG_RULE_ARG),
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.forms.inc',
    'type' => MENU_CALLBACK,
  );
  
  $menu[HANSEL_PATH_DELETE_RULE] = array(
    'title' => 'Delete rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hansel_delete_rule_form', HANSEL_PATH_DELETE_RULE_ARG),
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.forms.inc',
    'type' => MENU_CALLBACK,
  );
  
  $menu[HANSEL_PATH_CONFIG_SWITCH] = array(
    'title' => 'Configure switch',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hansel_config_switch_form', HANSEL_PATH_CONFIG_SWITCH_ARG),
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.forms.inc',
    'type' => MENU_CALLBACK,
  );
  
  $menu[HANSEL_PATH_JS_RULE_FORM] = array(
    'page callback' => 'hansel_rule_form_ahah',
    'access arguments' => array('administer hansel'),
    'file' => 'hansel.forms.inc',
    'type' => MENU_CALLBACK,
  );
  
  $menu[HANSEL_PATH_JS_TEST_FORM] = array(
    'page callback' => 'hansel_test_form_ahah',
    'access arguments' => array('test hansel'),
    'file' => 'hansel.test.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $menu;
}

/**
 * Get all Hansel rules for a specified parent id in a list.
 *
 * @access private
 * @param int $pid Return only rules with this parent id
 * @return array
 */
function _hansel_get_rules($pid = 0) {
  $output = array();
  $sql = 'SELECT r.rid, r.pid, r.name, r.crumb_action, r.crumb_action_arguments,
  rag.destination as goto_destination,
  ral.restore_original as leave_restore,
  ras.handler as switch_handler,
  ras.arguments as switch_arguments,
  CASE COALESCE(r.pid, 0) WHEN 0 THEN
    CASE r.name WHEN \'start\' THEN 0 ELSE 1 END
  ELSE 1 END AS start_order
  FROM {hansel_rule} r
  LEFT JOIN {hansel_rule_action_goto} rag ON rag.rid = r.rid
  LEFT JOIN {hansel_rule_action_leave} ral ON ral.rid = r.rid
  LEFT JOIN {hansel_rule_action_switch} ras ON ras.rid = r.rid ';
  if ($pid != -1) { // Means; get all rules as a flat list
    $sql .= 'WHERE COALESCE(pid, 0) = %d ';
  }
  $sql .= 'ORDER BY start_order ASC, r.name ASC';
  $res = db_query($sql, $pid);
  while ($rec = db_fetch_array($res)) {
    $rule = new stdClass();
    $rule->rid = $rec['rid'];
    $rule->pid = $rec['pid'];
    $rule->name = $rec['name'];
    $rule->crumb_action = $rec['crumb_action'];
    if (empty($rec['crumb_action_arguments'])) {
      $rule->crumb_action_arguments = array();
    }
    else {
      $rule->crumb_action_arguments = unserialize($rec['crumb_action_arguments']);
    }
    if (!empty($rec['goto_destination'])) {
      $rule->action = 'goto';
      $rule->destination = $rec['goto_destination'];
    }
    elseif (!empty($rec['switch_handler'])) {
      $rule->action = 'switch';
      $rule->handler = $rec['switch_handler'];
      if (!empty($rec['switch_arguments'])) {
        $rule->arguments = unserialize($rec['switch_arguments']);
      }
      else {
        $rule->arguments = array();
      }
    }
    else {
      $rule->action = 'leave';
      $rule->restore = $rec['leave_restore'] ? TRUE : FALSE;
    }
    $output[$rule->rid] = $rule;
  }
  return $output;
}

/**
 * Get all Hansel rules in a list including depth,
 * sorted by hierarchy, then alphabetically.
 *
 * @param int $pid
 * @param int $depth
 * @return array
 */
function _hansel_get_rules_tree($pid = 0, $depth = 0) {
  $output = array();
  if ($pid == -1) {
    // Include root element.
    $output[0] = '<root>';
    $depth = 1;
    $pid = 0;
  }
  foreach (_hansel_get_rules($pid) as $rule) {
    $pad_str = '- ';
    $name = str_pad('', $depth * strlen($pad_str), $pad_str) . $rule->name;
    $output[$rule->rid] = $name;
    foreach (_hansel_get_rules_tree($rule->rid, $depth + 1) as $rid => $name) {
      $output[$rid] = $name;
    }
  }
  return $output;
}

/**
 * Get list of all available switch types.
 *
 * @access private
 * @return array
 */
function _hansel_get_switch_types() {
  $output = array();
  foreach (module_implements('hansel_switch_types') as $module) {
    $types = module_invoke($module, 'hansel_switch_types');
    foreach ($types as $type => $details) {
      $details['module'] = $module;
      $output[$type] = $details;
      if (!empty($details['file'])) {
        // Seperate filename and extension.
        preg_match('/^(.*)\\.([^\\.]+)$/', $details['file'], $match);
        module_load_include($match[2], $module, $match[1]);
      }
    }
  }
  return $output;
}

/**
 * Get list of all available breadcrumb action types.
 *
 * @access private
 * @return array
 */
function _hansel_get_action_types() {
  $output = array();
  foreach (module_implements('hansel_action_types') as $module) {
    $types = module_invoke($module, 'hansel_action_types');
    foreach ($types as $type => $details) {
      $details['module'] = $module;
      $output[$type] = $details;
      if (!empty($details['file'])) {
        // Seperate filename and extension.
        preg_match('/^(.*)\\.([^\\.]+)$/', $details['file'], $match);
        module_load_include($match[2], $module, $match[1]);
      }
    }
  }
  return $output;
}

/**
 * Check if the switch has a configuration form.
 *
 * @param string $handler
 * @return bool
 */
function _hansel_is_configurable_switch($handler) {
  $types = _hansel_get_switch_types();
  if (!isset($types[$handler])) {
    return FALSE;
  }
  return !empty($types[$handler]['config form']);
}

/**
 * Get switch information line, used for display in admin.
 *
 * @access private
 * @param object $rule
 * @return string
 */
function _hansel_get_switch_info($rule) {
  $types = _hansel_get_switch_types();
  if (!isset($types[$rule->handler])) {
    return '';
  }
  if (empty($types[$rule->handler]['info'])) {
    return '';
  }
  return call_user_func($types[$rule->handler]['info'], $rule->arguments);
}

/**
 * Get information line for a breadcrumb action, used for display in admin.
 *
 * @access private
 * @param object $rule
 * @return string
 */
function _hansel_get_crumb_action_info($rule) {
  $types = _hansel_get_action_types();
  if (!isset($types[$rule->crumb_action])) {
    return '';
  }
  if (empty($types[$rule->crumb_action]['info'])) {
    return $rule->crumb_action;
  }
  return filter_xss(call_user_func($types[$rule->crumb_action]['info'], $rule->crumb_action_arguments));
}

/**
 * Implements hook_hansel_switch_types().
 *
 * @see _hansel_get_switch_types()
 */
function hansel_hansel_switch_types() {
  return array(
    'url argument' => array(
      'compare' => 'hansel_switch_url_argument_compare',
      'info' => 'hansel_switch_url_argument_info',
      'config form' => 'hansel_switch_url_argument_config_form',
      'file' => 'hansel.switches.inc',
    ),
    'php' => array(
      'compare' => 'hansel_switch_php_argument_compare',
      'config form' => 'hansel_switch_php_argument_config_form',
      'file' => 'hansel.switches.inc',
    ),
    'node id' => array(
      'compare' => 'hansel_switch_node_id_compare',
      'file' => 'hansel.switches.inc',
    ),
    'node type' => array(
      'compare' => 'hansel_switch_node_type_compare',
      'file' => 'hansel.switches.inc',
    ),
    'node age' => array(
      'compare' => 'hansel_switch_node_age_compare',
      'info' => 'hansel_switch_node_age_info',
      'config form' => 'hansel_switch_node_age_config_form',
      'file' => 'hansel.switches.inc',
    ),
    'path alias' => array(
      'compare' => 'hansel_switch_path_alias_compare',
      'info' => 'hansel_switch_path_alias_info',
      'config form' => 'hansel_switch_path_alias_config_form',
      'file' => 'hansel.switches.inc',
    )
  );
}

/**
 * Implements hook_hansel_action_types().
 * 
 * @see _hansel_get_action_types()
 */
function hansel_hansel_action_types() {
  return array(
    'add single link' => array(
      'get crumbs' => 'hansel_action_add_single_link_get_crumbs',
      'info' => 'hansel_action_add_single_link_info',
      'config form' => 'hansel_action_add_single_link_config_form',
      'file' => 'hansel.actions.inc',
      'show token list' => TRUE,
    ),
    'add link to node' => array(
      'get crumbs' => 'hansel_action_add_link_to_node_get_crumbs',
      'file' => 'hansel.actions.inc',
    ),
    'add link to nodetype' => array(
      'get crumbs' => 'hansel_action_add_link_to_nodetype_get_crumbs',
      'config form' => 'hansel_action_add_link_to_nodetype_config_form',
      'file' => 'hansel.actions.inc',
    ),
    'add link to user' => array(
      'get crumbs' => 'hansel_action_add_link_to_user_get_crumbs',
      'config form' => 'hansel_action_add_link_to_user_config_form',
      'file' => 'hansel.actions.inc',
    ),
    'add link to current page' => array(
      'get crumbs' => 'hansel_action_add_link_to_current_page_get_crumbs',
      'file' => 'hansel.actions.inc',
    ),
  );
}

/**
 * Set the test path for Hansel, used on the test tab.
 *
 * @access private
 * @param string $path
 */
function _hansel_set_test_path($path) {
  global $_hansel_test_path;
  // The arg() output - which we use to switch on - is always the real path, not the alias.
  if (module_exists('path')) {
    $sql = 'SELECT src FROM {url_alias} WHERE dst = \'%s\'';
    $res = db_query($sql, $path);
    if ($src = db_result($res)) {
      drupal_set_message(t('Given path is an alias, using %src instead', array('%src' => $src)), 'warning');
      $path = $src;
    }
  }
  $_hansel_test_path = $path;
}

/**
 * Get a part of the query string.
 *
 * Hansel extensions must use hansel_arg() instead of arg(). This is to make the
 * testsuite work (found at admin/build/hansel/test).
 * 
 * @param int $number Part number of the query string, starting with 0.
 * @return string
 */
function hansel_arg($number) {
  global $_hansel_test_path;
  if (!empty($_hansel_test_path)) {
    return arg($number, $_hansel_test_path);
  }
  return arg($number);
}

/**
 * Get the query string
 *
 * Hansel extensions must use hansel_path() instead of $_GET['q']. This is to
 * make the testsuite work (found at admin/build/hansel/test).
 *
 * @return string
 */
function hansel_path() {
  global $_hansel_test_path;
  if (!empty($_hansel_test_path)) {
    return $_hansel_test_path;
  }
  return isset($_GET['q']) ? $_GET['q'] : '';
}

/**
 * Build the Hansel configuration object.
 *
 * This object is used to cache the whole Hansel configuration. We use this
 * to generate the breadcrumbs and for the export functionality.
 *
 * @access private
 * @return array
 */
function _hansel_build_config() {
  $start_rid = NULL;
  $rules = array();
  foreach (_hansel_get_rules(-1) as $name => $rule) {
    // Add children
    $rule->children = array();
    $sql = 'SELECT r.rid FROM {hansel_rule} r WHERE r.pid = %d';
    $res = db_query($sql, $rule->rid);
    while ($rec = db_fetch_array($res)) {
      $rule->children[] = $rec['rid'];
    }
    $rules[$rule->rid] = $rule;
    if (empty($rule->pid) && $rule->name == 'start') {
      $start_rid = $rule->rid;
    }
  }
  return array(
    'version' => HANSEL_CONFIG_VERSION,
    'start_rid' => $start_rid,
    'rules' => $rules
  );
}

/**
 * Add a message to the trace.
 * 
 * @param string $message
 */
function _hansel_test_message($message) {
  global $_hansel_test_messages;
  if (empty($_hansel_test_messages)) {
    $_hansel_test_messages = array();
  }
  $_hansel_test_messages[] = filter_xss($message);
}

/**
 * Get Hansel configuration.
 *
 * @return array
 */
function hansel_get_config() {
  $config = cache_get(HANSEL_CONFIG_CID);
  if (!$config || $config->data['version'] != HANSEL_CONFIG_VERSION) {
    $config = _hansel_build_config();
    cache_set(HANSEL_CONFIG_CID, $config);
  }
  else {
    $config = $config->data;
  }
  return $config;
}

/**
 * Generate breadcrumbs.
 *
 * @return mixed Array with breadcrumbs or FALSE (means: leave with restore option).
 */
function hansel_get_breadcrumbs($test = FALSE) {
  $config = hansel_get_config();
  extract($config);
  
  if (!$start_rid) {
    !$test or _hansel_test_message(t('No rule found with name "start" on the top level'));
    return FALSE;
  }
  
  $crumb_actions = _hansel_get_action_types();
  $switch_types = _hansel_get_switch_types();

  // Define variable containing rule id's we had used.
  // We need this to prevent infinite loops generated by wrong goto actions.
  $history = array();

  // Define variable containing the newly generated breadcrumbs.
  $breadcrumbs = array();

  // Set the current rule id to the start rule.
  $rid = $start_rid;

  // Walk through the rules until we return or break.
  while (TRUE) {
    // Check for recursion.
    if (in_array($rid, $history)) {
      !$test or _hansel_test_message(t('Got recursion on rule %name', array('%name' => $rules[$rid]->name)));
      return FALSE;
    }
    $history[] = $rid;
    
    !$test or _hansel_test_message(t('Executing rule %name', array('%name' => $rules[$rid]->name)));
    
    // Execute crumb action.
    if ($rules[$rid]->crumb_action) {
      !$test or _hansel_test_message(t('Executing crumb action %type', array('%type' => $rules[$rid]->crumb_action)));
      $callback = $crumb_actions[$rules[$rid]->crumb_action]['get crumbs'];
      if (!function_exists($callback)) {
        !$test or _hansel_test_message(t('Callback not found'));
        break; // Break while (TRUE) loop
      }
      $crumbs = call_user_func($callback, $rules[$rid]->crumb_action_arguments);
      for ($i = 0; $i < count($crumbs); $i++) {
        if (empty($crumbs[$i]) || (is_array($crumbs[$i]) && empty($crumbs[$i]['title']))) {
          // Skip empty breadcrumbs in output.
          continue;
        }
        $breadcrumbs[] = $crumbs[$i];
      }
      !$test or _hansel_test_message(t('Added %count crumb(s)', array('%count' => count($crumbs))));
    }
    
    // Execute action.
    switch ($rules[$rid]->action) {
      case 'goto':
        if (!isset($rules[$rules[$rid]->destination])) {
          !$test or _hansel_test_message(t('Destination not found, leaving'));
          break(2); // Break while (TRUE) loop
        }
        !$test or _hansel_test_message(t('Goto rule %name', array('%name' => $rules[$rules[$rid]->destination]->name)));
        $rid = $rules[$rid]->destination;
        break;
      case 'switch':
        !$test or _hansel_test_message(t('switch on %handler', array('%handler' => $rules[$rid]->handler)));
        $callback = $switch_types[$rules[$rid]->handler]['compare'];
        if (!function_exists($callback)) {
          !$test or _hansel_test_message(t('Callback not found'));
          break(2); // Break while (TRUE) loop
        }
        $default_rid = NULL;
        foreach ($rules[$rid]->children as $child_rid) {
          if (call_user_func($callback, $rules[$rid]->arguments, $rules[$child_rid]->name)) {
            !$test or _hansel_test_message(t('Match on rule %name', array('%name' => $rules[$child_rid]->name)));
            $rid = $child_rid;
            break(2);
          }
          else {
            !$test or _hansel_test_message(t('No match on rule %name', array('%name' => $rules[$child_rid]->name)));
            if ($rules[$child_rid]->name == '<default>') {
              $default_rid = $child_rid;
            }
          }
        }
        if ($default_rid) {
          !$test or _hansel_test_message(t('Using default rule'));
          $rid = $default_rid;
        }
        else {
          !$test or _hansel_test_message(t('No default rule found, leaving'));
          break(2); // Break while (TRUE) loop
        }
        break;
      case 'leave':
      default:
        // Check if the "restore original breadcrumbs" option is checked.
        if ($rules[$rid]->restore) {
          hansel_breadcrumb_was_restored(TRUE);
          !$test or _hansel_test_message(t('Leave and restore old breadcrumbs'));
          return FALSE;
        }
        else {
          !$test or _hansel_test_message(t('Leave'));
          break(2); // Break while (TRUE) loop
        }
        break;
    }
  }

  $count = count($breadcrumbs);
  $last_item_number = $count - 1;
  $last_item_link = variable_get(HANSEL_VAR_LAST_ITEM_LINK, TRUE);

  // Convert breadcrumbs array structure into an array with HTML links
  for ($i = 0; $i < $count; ++$i) {
    // Breadcrumbs should be returned in an array by the get crumbs callbacks.
    // Strings are supported for legacy, but are deprecated.
    // Please note that tokens are not supported only on arrays.
    if (is_array($breadcrumbs[$i])) {
      $breadcrumbs[$i]['title'] = hansel_replace_tokens($breadcrumbs[$i]['title']);
      $breadcrumbs[$i]['href'] = hansel_replace_tokens($breadcrumbs[$i]['href']);
      $breadcrumbs[$i]['title'] = _hansel_trim($breadcrumbs[$i]['title']);
      switch ($breadcrumbs[$i]['href']) {
        case '<none>':
          $breadcrumbs[$i] = check_plain($breadcrumbs[$i]['title']);
          break;
        case '<front>':
          $breadcrumbs[$i] = ($last_item_link || $i != $last_item_number) ? l($breadcrumbs[$i]['title'], '') : check_plain($breadcrumbs[$i]['title']);
          break;
        default:
          $breadcrumbs[$i] = ($last_item_link || $i != $last_item_number) ? l($breadcrumbs[$i]['title'], $breadcrumbs[$i]['href']) : check_plain($breadcrumbs[$i]['title']);
      }
    }
  }

  // Remove the last item if the "Hide last item" configuration option is set.
  if (variable_get(HANSEL_VAR_LAST_ITEM_HIDE, FALSE)) {
    if ($count) {
      !$test or _hansel_test_message(t('Removing last breadcrumb item (hide last item configuration option is set)'));
      array_pop($breadcrumbs);
      --$count;
    }
  }

  // Trim whole items if a maximum item count is set.
  if ($max_items = variable_get(HANSEL_VAR_MAX_ITEM_COUNT, 0)) {
    if ($count > $max_items) {
      $trimmed_breadcrumbs = array();
      for ($i = 0; $i < floor($max_items / 2); $i++) {
        $trimmed_breadcrumbs[] = $breadcrumbs[$i];
      }
      if ($replacement = variable_get(HANSEL_VAR_REMOVED_ITEMS_REPLACEMENT, HANSEL_VAR_REMOVED_ITEMS_REPLACEMENT_DEFAULT)) {
        $trimmed_breadcrumbs[] = check_plain($replacement);
      }
      for ($i = $count - ceil($max_items / 2); $i < $count; $i++) {
        $trimmed_breadcrumbs[] = $breadcrumbs[$i];
      }
      $breadcrumbs = $trimmed_breadcrumbs;
    }
  }
  
  return $breadcrumbs;
}

/**
 * Trim the title for breadcrumb links.
 */
function _hansel_trim($title) {
  $max_length = variable_get(HANSEL_VAR_MAX_ITEM_LENGTH, 0);
  $word_boundary = variable_get(HANSEL_VAR_TRIM_ON_WORD_BOUNDARY, TRUE);
  $ellpisis = variable_get(HANSEL_VAR_TRIM_ELLPIPSIS, HANSEL_VAR_TRIM_ELLPIPSIS_DEFAULT);

  if (!$max_length) {
    // Trimming is disabled.
    return $title;
  }

  if (drupal_strlen($title) <= $max_length) {
    return $title;
  }

  $title = drupal_substr($title, 0, $max_length);
  if (strrpos($title, ' ') > strlen($title) / 3 && $word_boundary) {
    $title = substr($title, 0, strrpos($title, ' '));
  }

  $title = trim($title);

  return $title . $ellpisis;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Alter the theme registry so that hansel_get_themed_breadcrumbs() is called
 * before the actual theming function, which is now invoked by using
 * theme('breadcrumb_original', ...).
 */
function hansel_theme_registry_alter(&$theme_registry) {
  $theme_registry['breadcrumb_original'] = $theme_registry['breadcrumb'];
  $theme_registry['breadcrumb']['function'] = 'hansel_get_themed_breadcrumbs';
}

/**
 * Get themed breadcrumbs, which content may be overruled by Hansel.
 *
 * @param array $original_breadcrumbs
 * @return string
 */
function hansel_get_themed_breadcrumbs($original_breadcrumbs) {
  $breadcrumbs = hansel_get_breadcrumbs();
  if (is_array($breadcrumbs)) {
    return theme('breadcrumb_original', $breadcrumbs);
  }
  return theme('breadcrumb_original', $original_breadcrumbs);
}

/**
 * Replace tokens using token module, using the node or user from the path.
 *
 * @param string $input
 * @return string
 */
function hansel_replace_tokens($input) {
  global $user;

  // Statically cache token type and object
  static $token_type;
  static $token_object;

  // Check if token module is enabled and at least one token is used.
  if (module_exists('token') && preg_match('/\\[.+\\]/', $input)) {
    // Determine the context for the token replacement and load the node or user object.
    if (!isset($token_type)) {
      $token_type = 'global';
      $token_object = NULL;
      if (strtolower(hansel_arg(0)) == 'node' && is_numeric(hansel_arg(1))) {
        $token_type = 'node';
        $token_object = node_load(hansel_arg(1));
      }
      elseif (strtolower(hansel_arg(0)) == 'user') {
        $token_type = 'user';
        if (is_numeric(hansel_arg(1))) {
          $token_object = user_load(hansel_arg(1));
        }
        else {
          $token_object = $user;
        }
      }
    }
    // Replace tokens using token module.
    $input = token_replace($input, $token_type, $token_object);
  }

  // Replace [arg-N] tokens
  $i = -1;
  while ($arg = hansel_arg(++$i)) {
    $input = str_replace("[arg-$i]", $arg, $input);
  }

  return $input;
}

/**
 * Implementation of hook_init().
 */
function hansel_init() {
  if (arg(0) != 'admin' && variable_get(HANSEL_VAR_SET_MENU_NAME, HANSEL_VAR_SET_MENU_NAME_DEFAULT)) {
    /**
     * Set the active menu name for the current path we're looking at.
     * This will make sure that the 'leave original breadcrumbs' option will work,
     * breadcrumbs will not work otherwise for pages which are not in the default menu.
     */
    $menu_item = menu_get_item();
    $mlid = db_result(db_query('SELECT mlid FROM {menu_links} WHERE link_path = \'%s\' AND menu_name != \'admin_menu\'', $menu_item['href']));
    if ($mlid) {
      $menu_name = db_result(db_query('SELECT menu_name FROM {menu_links} WHERE mlid = %d', $mlid));
      if ($menu_name !== FALSE && $menu_name != 'navigation') {
        menu_set_active_menu_name($menu_name);
      }
    }
  }
}

/**
 * Static restore function. DX experience.
 *
 * Determine if the breadcrumbs where restored.
 */
function hansel_breadcrumb_was_restored($restored = FALSE) {
  static $restored_value, $ran = FALSE;
  if (!$ran) {
    $restored_value = $restored;
    $ran = TRUE;
  }
  return $restored_value;
}

/**
 * Read data from Hansel cache, respecting Hansel cache settings.
 *
 * @param string $cid
 * @return mixed
 */
function hansel_cache_get($cid) {
  static $setting = NULL;
  if (is_null($setting)) {
    $setting = variable_get(HANSEL_VAR_CACHE, HANSEL_VAR_CACHE_DEFAULT);
  }
  if ($setting) {
    $cid = "hansel:$cid";
    if ($data = cache_get($cid)) {
      return $data->data;
    }
  }
  return NULL;
}

/**
 * Write data to Hansel cache, respecting Hansel cache settings.
 *
 * @param string $cid
 * @param mixed $data
 */
function hansel_cache_set($cid, $data) {
  static $setting = NULL;
  if (is_null($setting)) {
    $setting = variable_get(HANSEL_VAR_CACHE, HANSEL_VAR_CACHE_DEFAULT);
  }
  if ($setting) {
    $cid = "hansel:$cid";
    cache_set($cid, $data, 'cache', time() + $setting);
  }
}