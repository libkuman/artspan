<?php
// $Id: hansel_taxonomy.module,v 1.4 2011/01/11 16:48:03 mauritsl Exp $

/**
 * @file
 * Hansel taxonomy integration
 *
 * This modules provides switches and breadcrumb actions for taxonomies.
 */

/**
 * Implements hook_hansel_action_types().
 */
function hansel_taxonomy_hansel_action_types() {
  return array(
    'add term path' => array(
      'get crumbs' => 'hansel_taxonomy_action_add_term_path_get_crumbs',
      'info' => 'hansel_taxonomy_action_add_term_path_info',
      'config form' => 'hansel_taxonomy_action_add_term_path_config_form',
    ),
  );
}

/**
 * Callback for "add term path" breadcrumb action
 *
 * @param array $arguments Values from the configuration form.
 * @return array
 */
function hansel_taxonomy_action_add_term_path_get_crumbs($arguments) {
  $links = array();
  
  if (strtolower(hansel_arg(0)) == 'taxonomy' && strtolower(hansel_arg(1)) == 'term' && is_numeric(hansel_arg(2))) {
    $tid = hansel_arg(2);
    if ($data = hansel_cache_get("taxonomy:t$tid")) {
      return $data;
    }
    if ($term = taxonomy_get_term($tid)) {
      $parents = taxonomy_get_parents_all($term->tid);
      foreach ($parents as $term) {
        $links[] = array(
          'title' => $term->name,
          'href' => 'taxonomy/term/' . $term->tid,
        );
      }
      $links = array_reverse($links);
    }
    hansel_cache_set("taxonomy:t$tid", $links);
  }
  elseif (strtolower(hansel_arg(0)) == 'node' && is_numeric(hansel_arg(1))) {
    $nid = hansel_arg(1);
    if ($data = hansel_cache_get("taxonomy:n$nid")) {
      return $data;
    }
    if ($node = node_load($nid)) {
      if (empty($arguments['vid'])) {
        $terms = taxonomy_node_get_terms($node);
      }
      else {
        $terms = taxonomy_node_get_terms_by_vocabulary($node, $arguments['vid']);
      }
      if ($term = reset($terms)) {
        $parents = taxonomy_get_parents_all($term->tid);
        foreach ($parents as $term) {
          $links[] = array(
            'title' => $term->name,
            'href' => 'taxonomy/term/' . $term->tid,
          );
        }
        $links = array_reverse($links);
      }
    }
    hansel_cache_set("taxonomy:n$nid", $links);
  }
  
  return $links;
}

/**
 * Callback for "add term path" action to generate the information line
 *
 * @param array $arguments Values from the configuration form.
 * @return string
 */
function hansel_taxonomy_action_add_term_path_info($arguments) {
  if (empty($arguments['vid'])) {
    return t('Add term path');
  }
  else {
    $vocab = taxonomy_vocabulary_load($arguments['vid']);
    return t('Add term path using the vocabulary %vocab', array('%vocab' => $vocab->name));
  }
}

/**
 * Callback to generate the configuration form for the "add term path" action
 *
 * @param array $arguments
 * @return array
 */
function hansel_taxonomy_action_add_term_path_config_form($arguments) {
  $form = array();
  
  $sql = 'SELECT vid, name FROM {vocabulary} ORDER BY name';
  $res = db_query($sql);
  $options = array(0 => t('All'));
  while ($rec = db_fetch_array($res)) {
    $options[$rec['vid']] = $rec['name'];
  }
  $form['vid'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $options,
    '#description' => t('Use only terms from this vocabuly. This applies only to node pages.'),
    '#default_value' => isset($arguments['vid']) ? $arguments['vid'] : 0,
  );
  
  return $form;
}